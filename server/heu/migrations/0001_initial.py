# Generated by Django 4.2.4 on 2024-07-30 18:20

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdminData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(max_length=255)),
                ('verified', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(max_length=255)),
                ('num_attempts', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('questions', models.JSONField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='HeuStaffData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(max_length=255)),
                ('verified', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='InstructorData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(max_length=255)),
                ('verified', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='LearningOrganization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='LearningOrganizationLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('learning_organization', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='heu.learningorganization')),
            ],
        ),
        migrations.CreateModel(
            name='LookupIndex',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('custom_id', models.IntegerField()),
                ('format', models.CharField(max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('custom_id', models.IntegerField(primary_key=True, serialize=False)),
                ('text', models.TextField(blank=True)),
                ('audio', models.TextField(blank=True)),
                ('image', models.TextField(blank=True)),
                ('json', models.JSONField()),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('viewed', models.BooleanField(default=False)),
                ('approved', models.BooleanField(default=False)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('enrolled_students', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('waitlist_students', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('instructors', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('admin_creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='heu.admindata')),
                ('learning_organization_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='heu.learningorganizationlocation')),
            ],
        ),
        migrations.CreateModel(
            name='StudentData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(max_length=255)),
                ('verified', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='SessionRequirements',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minimum_session_hours', models.IntegerField(default=1)),
                ('minmum_num_weeks_consecutive', models.IntegerField(default=8)),
                ('minimum_avg_days_per_week', models.IntegerField(default=2)),
                ('num_exempt_weeks', models.IntegerField(default=2)),
                ('learning_organization_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='heu.learningorganizationlocation')),
            ],
        ),
        migrations.CreateModel(
            name='SessionPrerequisites',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num_meetings_per_week', models.IntegerField(default=5)),
                ('learning_organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='heu.learningorganization')),
            ],
        ),
        migrations.CreateModel(
            name='SessionApprovalToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('used', models.BooleanField(default=False)),
                ('sessions', models.ManyToManyField(related_name='approval_tokens', to='heu.session')),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('max_capacity', models.IntegerField()),
                ('learning_organization', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='heu.learningorganization')),
                ('learning_organization_location', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='heu.learningorganizationlocation')),
            ],
        ),
        migrations.CreateModel(
            name='InstructorApplicationTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('google_form_link', models.URLField()),
                ('active', models.BooleanField(default=True)),
                ('admin_creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='heu.admindata')),
                ('learning_organization_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='heu.learningorganizationlocation')),
            ],
        ),
        migrations.CreateModel(
            name='InstructorApplicationInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completed', models.BooleanField(default=False)),
                ('reviewed', models.BooleanField(default=False)),
                ('accepted', models.BooleanField(default=False)),
                ('approver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='heu.admindata')),
                ('instructor_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='heu.instructordata')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='heu.instructorapplicationtemplate')),
            ],
        ),
        migrations.AddField(
            model_name='admindata',
            name='learning_organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='heu.learningorganization'),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.CharField(max_length=255)),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('user_type', models.CharField(choices=[('ad', 'admin'), ('in', 'instructor'), ('st', 'student'), ('hs', 'heu-staff')], max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
